name: Detox Tests Workflow

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  detox-tests:
    runs-on: macos-latest # Używamy macOS, aby uruchomić symulatory iOS

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      # Instalacja MySQL
      - name: Install MySQL
        run: |
          brew install mysql@5.7  # Instalacja MySQL (5.7 jest stabilną wersją)
          brew services start mysql@5.7  # Uruchomienie MySQL jako usługi
          mysql --version  # Sprawdzenie wersji MySQL

      # Tworzenie bazy danych
      - name: Create database
        run: |
          mysql -uroot -e "CREATE DATABASE IF NOT EXISTS multilern;"  # Tworzenie bazy danych

      # Import bazy danych z pliku dump
      - name: Create database from dump
        run: |
          sleep 5  # Czekamy chwilę na uruchomienie MySQL
          mysql -uroot multilern < backend/helpers/multilern.sql  # Załadowanie dumpu bazy danych

      # Start backendu
      - name: Start backend
        run: |
          cd backend
          yarn install
          yarn start &  # Uruchamiamy backend w tle

      - name: Navigate to frontend
        working-directory: frontend
        run: echo "Navigated to frontend folder"

      - name: Install frontend dependencies
        working-directory: frontend
        run: yarn install

      - name: Install iOS dependencies
        if: runner.os == 'macOS'
        working-directory: frontend
        run: |
          brew install cocoapods
          brew install applesimutils
          cd ios && pod install

      - name: Build Detox
        working-directory: frontend
        run: yarn e2e:build-ios-debug

      - name: Run Detox tests
        working-directory: frontend
        run: yarn e2e:test-ios-debug

      # Zatrzymywanie MySQL i backendu
      - name: Stop MySQL service and backend
        run: |
          brew services stop mysql@5.7  # Zatrzymujemy usługę MySQL
          kill $(jobs -p)  # Zatrzymujemy proces backendu
